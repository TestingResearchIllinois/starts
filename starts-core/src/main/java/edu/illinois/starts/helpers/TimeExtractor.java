package edu.illinois.starts.helpers;

import java.io.File;
import java.io.FilenameFilter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import edu.illinois.starts.util.Pair;
import org.apache.maven.plugin.surefire.runorder.RunEntryStatistics;

/**
 * Utility methods for extracting timing information from files generated by Surefire.
 */
public class TimeExtractor {

    public static List<Pair> getEstimatedRuntimes(Set<String> affectedTests, File baseDir, File reportsDir,
                                                  String startsDirectoryPath) {
        List<Pair> testTimes = new ArrayList();
        Map<String, Integer> statisticsMap = null;
        boolean useStatisticsMap = false;
        boolean useLocalRuntimesMaintainer = false;

        //Check if the statistics file exists. If it does not, use the XML files generated for each test instead
        File surefireStatsFile = getSurefireStatsFile(baseDir);
        if (surefireStatsFile != null) {
            statisticsMap = getPrevTestRunTimeMapFromFile(surefireStatsFile);
            if (statisticsMap != null) {
                useStatisticsMap = true;
            }
        }

        for (String currTestName : affectedTests) {
            int prevTime = -1;
            if (useLocalRuntimesMaintainer) {
                prevTime = LocalRuntimesMaintainer.getAverageRuntime(baseDir, startsDirectoryPath, currTestName);
            } else if (useStatisticsMap) {
                prevTime = getPrevTestRuntimeFromStatsMap(statisticsMap, currTestName);
            } else {
                prevTime = getPrevTestRuntimeFromXML(reportsDir, currTestName);
            }
            testTimes.add(new Pair(currTestName, prevTime));
        }
        return testTimes;
    }

    //Return the time it took the test to run last time, in milliseconds
    public static Map<String, Integer> getPrevTestRunTimeMapFromFile(File surefireStatsFile) {
        //Read the file and parse it using Surefire's methods
        List<String> surefireStats = FileUtil.getFileContents(surefireStatsFile.toPath());
        Map<String, Integer> statisticsRuntimeMap = new HashMap<>();
        if (surefireStats == null) {
            return null;
        }
        for (String line : surefireStats) {
            if (!line.startsWith("#")) {
                RunEntryStatistics stats = RunEntryStatistics.fromString(line);
                statisticsRuntimeMap.put(stats.getTestName(), stats.getRunTime());
            }
        }
        return statisticsRuntimeMap;
    }

    public static File getSurefireStatsFile(File baseDirectory) {
        //TODO figure out how to get the statistics file hash
        //For now, look for the first file starting with ".surefire-"
        File[] surefireStatsList = baseDirectory.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.startsWith(".surefire-");
            }
        });
        if (surefireStatsList == null || surefireStatsList.length < 1) {
            return null;
        }
        return surefireStatsList[0];
    }

    public static int getPrevTestRuntimeFromXML(File reportsDir, String testName) {
        List<String> xmlContents = FileUtil.getFileContents(reportsDir.toPath(), "/TEST-" + testName + ".xml");
        if (xmlContents == null) {
            return -1;
        }
        //TODO write more resilient/better parsing
        for (String currLine : xmlContents) {
            if (currLine.startsWith("<testsuite")) {
                String timeString = "";
                int timeIndex = currLine.indexOf("time=") + 6; //Add 6 to skip past the first quote
                char currChar = currLine.charAt(timeIndex);
                while (currChar != '\"') {
                    timeString += currChar;
                    timeIndex++;
                    currChar = currLine.charAt(timeIndex);
                }
                double timeInS = Double.parseDouble(timeString);
                return (int) (timeInS * 1000);
            }
        }
        return -1;
    }

    public static int getPrevTestRuntimeFromStatsMap(Map<String, Integer> statsMap, String testName) {
        int totalRunTime = 0;
        boolean foundTest = false;

        //Add up all the runtimes for the individual tests in a test class
        for (String key : statsMap.keySet()) {
            if (key.contains(testName)) {
                totalRunTime += statsMap.get(key);
                foundTest = true;
            }
        }

        //If the test was not found, return -1 for the runtime
        if (foundTest) {
            return totalRunTime;
        } else {
            return -1;
        }
    }

    public static int getTotalRuntime(List<Pair> runtimePairs) {
        int totalTime = 0;
        for (Pair currPair : runtimePairs) {
            int currTime = (Integer)currPair.getValue();
            if (currTime > 0) {
                totalTime += currTime;
            }
        }
        return totalTime;
    }
}
